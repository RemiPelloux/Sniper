[tool.poetry]
name = "pentest-cli"
version = "0.1.0"
description = "CLI tool for penetration testing with ML capabilities"
authors = ["Your Name <you@example.com>"] # Replace with actual author info
readme = "README.md" # Assuming a README will be created later
license = "MIT" # Or appropriate license
packages = [{ include = "src" }]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Security",
    "Development Status :: 3 - Alpha",
]

[tool.poetry.dependencies]
python = "^3.11"
typer = {extras = ["all"], version = "^0.12.3"}
validators = "^0.33.0"
tomli = "^2.0.1" # For reading TOML config if needed
tomli-w = "^1.0.0" # For writing TOML config if needed
dnspython = "^2.6.1"
python-whois = "^0.8.0"
httpx = "^0.27.0" # Add httpx for HTTP requests
python-nmap = "^0.7.1" # Add python-nmap for port scanning


[tool.poetry.dev-dependencies]
pytest = "^8.2.2"
pytest-asyncio = "^0.23.7"
black = "^24.4.2"
isort = "^5.13.2"
flake8 = "^7.1.0"
mypy = "^1.10.1"

[tool.poetry.scripts]
pentest-cli = "src.cli.main:app" # Entry point for the CLI

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tool Configurations based on sniper-rules.mdc

[tool.black]
line-length = 88
target-version = ['py311']

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 88
extend-ignore = "E203" # Ignore whitespace before ':' which conflicts with black
exclude = ".git,__pycache__,docs/,build/,dist/,*.egg-info/,venv/"
per-file-ignores = "__init__.py: F401" # Ignore unused imports in __init__

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
exclude = ["venv/"] # Exclude virtual environment if created 